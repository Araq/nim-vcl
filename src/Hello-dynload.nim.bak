# This is just an example to get you started. A typical binary package
# uses this file as the main entry point of the application.

when defined(gcc) and defined(windows):
  when defined(x86):
    {.link: "appres.res".}
  else:  
    {.link: "appres.o".}

# DLL
when defined(windows):
  const dllname = "liblcl.dll"
elif defined(macosx):
  const dllname = "liblcl.dylib"
else:
  const dllname = "liblcl.so"    

# when isMainModule:
#   echo("isMainModule")

import dynlib

type
  TNotifyEvent = proc(sender: pointer) {.nimcall.}

  # 这个怎么判断？？？？
  # 另外如何不定义类型直接可以转换呢？
  # windows= stdcall; linux and macOS = cdecl
  # TApplication
  TApplication_Instance = proc(): pointer {.stdcall.} 
  TApplication_SetMainFormOnTaskBar = proc(obj: pointer, val: bool) {.stdcall.}
  TApplication_Initialize  = proc(obj: pointer) {.stdcall.}
  TApplication_Run = proc(obj: pointer) {.stdcall.}
  TApplication_CreateForm = proc(obj: pointer, initScale: bool): pointer {.stdcall.}
  TApplication_SetTitle = proc(obj: pointer, val: cstring) {.stdcall.}
  
  # TForm
  TForm_SetPosition = proc(obj: pointer, val: int32) {.stdcall.}
  TForm_SetCaption = proc(obj: pointer, val: cstring) {.stdcall.}

  # TButton
  TButton_Create = proc(owner: pointer): pointer {.stdcall }
  TButton_SetParent = proc(obj: pointer, parent: pointer) {.stdcall.}
  TButton_SetOnClick = proc(obj: pointer, event: TNotifyEvent) {.stdcall.}
  TButton_SetCaption  = proc(obj: pointer, val: cstring) {.stdcall.}
  TButton_SetLeft = proc(obj: pointer, val: int32) {.stdcall.}
  TButton_SetTop = proc(obj: pointer, val: int32) {.stdcall.}
  TButton_GetCaption = proc(obj: pointer): cstring {.stdcall.}

  # TShowMessage = proc(msg: cstring) {.stdcall.}
  # callback
  TSetEventCallback = proc(callback: pointer) {.stdcall.}
  # TSetMessageCallback = proc(callback: pointer) {.stdcall.}
  # TSetThreadSyncCallback = proc(callback: pointer) {.stdcall.}

proc ShowMessage(msg: cstring) {.importc: "DShowMessage", dynlib: dllname, stdcall.} 

# 这是不会玩了，乱写的
var
  # ShowMessage : TShowMessage #proc(msg: cstring) {.stdcall.}
  Button_GetCaption: TButton_GetCaption



proc doEventCallbackProc(f: pointer, args: pointer, argCount: int32): uint {.stdcall.} =

  # args为一个数组，长度为argCount,argCount最大为12
  var val = proc (index: int): uint =
    return cast[ptr uint](cast[uint](args) + cast[uint](index * sizeof(int)))[]

  echo("doEventCallbackProc: f: ", cast[uint](f), ", args: ",cast[uint](args), ", count: ", argCount)
  # echo("args:", cast[uint](getParamOf(0, args)))
  case argCount
  of 0: 
    cast[proc(){.nimcall.}](f)()
  of 1:
    cast[proc(a1:uint) {.nimcall.} ](f)(val(0))
  of 2:
    cast[proc(a1,a2:uint) {.nimcall.} ](f)(val(0), val(1))
  of 3:
    cast[proc(a1,a2,a3:uint) {.nimcall.} ](f)(val(0), val(1), val(2))
  of 4:
    cast[proc(a1,a2,a3,a4:uint) {.nimcall.} ](f)(val(0), val(1), val(2), val(3))
  # of 5:
  #    echo(1)
  # of 6:
  #    echo(1)
  # of 7:
  #    echo(1)
  # of 8:
  #    echo(1)
  # of 9:
  #    echo(1)
  # of 10:
  #    echo(1)
  # of 11:
  #    echo(1)
  # of 12:  
  #    echo(1)
  else:
    echo("参数超出12个了")

  return 0
 
proc onButton1Click(sender: pointer) =
  echo("Button1 Click: ", Button_GetCaption(sender))
  ShowMessage("Hello Nim! Hello 世界！")


# 加载liblcl.dll，这里测试用动态加载的
let lcl = loadLib(dllname)
if lcl != nil:
  # get call
  let Application_Instance = cast[TApplicationInstance](lcl.symAddr("Application_Instance"))
  let Application_SetMainFormOnTaskBar = cast[TApplication_SetMainFormOnTaskBar](lcl.symAddr("Application_SetMainFormOnTaskBar"))
  let Application_Initialize = cast[TApplication_Initialize](lcl.symAddr("Application_Initialize"))
  let Application_Run = cast[TApplication_Run](lcl.symAddr("Application_Run"))
  let Application_CreateForm = cast[TApplication_CreateForm](lcl.symAddr("Application_CreateForm"))
  let Application_SetTitle = cast[TApplication_SetTitle](lcl.symAddr("Application_SetTitle"))

  let Form_SetPosition = cast[TForm_SetPosition](lcl.symAddr("Form_SetPosition"))
  let Form_SetCaption = cast[TForm_SetCaption](lcl.symAddr("Form_SetCaption"))

  let Button_Create = cast[TButton_Create](lcl.symAddr("Button_Create"))
  let Button_SetParent = cast[TButton_SetParent](lcl.symAddr("Button_SetParent"))
  let Button_SetOnClick = cast[TButton_SetOnClick](lcl.symAddr("Button_SetOnClick"))
  let Button_SetCaption = cast[TButton_SetCaption](lcl.symAddr("Button_SetCaption"))
  let Button_SetLeft = cast[TButton_SetLeft](lcl.symAddr("Button_SetLeft"))
  let Button_SetTop = cast[TButton_SetTop](lcl.symAddr("Button_SetTop"))
  Button_GetCaption = cast[TButton_GetCaption](lcl.symAddr("Button_GetCaption"))
  

  # 这个地方该怎么转换呢？？？？
  # ShowMessage = cast[TShowMessage](lcl.symAddr("DShowMessage"))


  # let ShowMessage = cast[TShowMessage](lcl.symAddr("DShowMessage"))
  let SetEventCallback = cast[TSetEventCallback](lcl.symAddr("SetEventCallback"))

  #echo(Application_Instance())
  echo("start gui")

  # set callback
  SetEventCallback(cast[pointer](doEventCallbackProc))

  # application
  let app = Application_Instance()
  Application_SetMainFormOnTaskBar(app, true)
  Application_SetTitle(app, "Nim: LCL Application")
  Application_Initialize(app)
  
  # form
  let form = Application_CreateForm(app, false)
  Form_SetCaption(form, "Nim: LCL Form")
  # let poScreenCenter = 4 
  Form_SetPosition(form, 4)

  # button
  let btn = Button_Create(form)
  Button_SetParent(btn, form)
  Button_SetCaption(btn, "button1")
  Button_SetLeft(btn, 100)
  Button_SetTop(btn, 50)
  Button_SetOnClick(btn, onButton1Click)
 
  # run app
  Application_Run(app)

  # 运行结束，释放dll
  unloadLib(lcl)
 

echo("end.")